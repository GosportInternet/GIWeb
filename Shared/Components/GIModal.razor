@using System.Threading

<div class="animate__animated modal @transitionClass @backdropClass" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="@modalStyle">
    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width:@PreferredWidth;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ModalContent
            </div>
            @if (ShowFooter)
            {
                <div class="modal-footer">
                    @ModalFooter
                </div>
            }
        </div>
    </div>
</div>

@code{

    [Parameter]
    public RenderFragment ModalContent { get; set; }
    [Parameter]
    public bool ShowFooter { get; set; }

    [Parameter]
    public bool Transition { get; set; } = false;
    [Parameter]
    public RenderFragment ModalFooter { get; set; }

    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public bool Backdrop { get; set; }

    [Parameter]
    public string PreferredWidth { get; set; } = "1250px";

    private string backdropClass { get; set; } = "";
    private string transitionClass { get; set; } = "";

    private bool showModal { get; set; } = false;
    private string modalStyle = "display:none;";
    public void ShowModal()
    {
        modalStyle = "display: block; padding-right: 15px; width:100%;";

        if (Backdrop)
        {
            backdropClass = "modal-backdrop";
        }

        if (Transition)
        {
            transitionClass = "animate__fadeIn";
        }
        Console.WriteLine("ShowModal");
        StateHasChanged();
    }

    public void HideModal()
    {
        if (Transition)
        {
            transitionClass = "animate__fadeOut";
            closeAfterAnimate();
        }
        else
        {
            modalStyle = "display:none;";
        }
        Console.WriteLine("HideModal");
        StateHasChanged();
    }

    private int fadeTime { get; set; } = 3;
    private void closeAfterAnimate()
    {
        CancellationTokenSource source = new CancellationTokenSource();

        var t = Task.Run(async delegate
        {
            Console.WriteLine("Starting delay before close");
            await Task.Delay(400, source.Token);
            modalStyle = "display:none;";
            transitionClass = "animate__fadeIn";
            StateHasChanged();
            Console.WriteLine("Has closed");
        });
    }
}