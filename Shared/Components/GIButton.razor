
<button class="@GetClass() p-@Padding m-@Margin @CustomClass" id="@Id" style="width:@Width; background-color:@BackgroundColour; color:@FontColour; border:solid; border-width:@BorderWidth; border-color:@BorderColor;" @onclick="ButtonClick"><a href="@Href" style="color:@FontColour;"><span>@ButtonText</span></a></button>

@code {

    [Parameter]
    public string CustomClass { get; set; }
    [Parameter]
    public string BtnClass { get; set; } = "btn btn-";

    [Parameter]
    public string Shadow { get; set; }

    [Parameter]
    public string BackgroundColour { get; set; } = "#866fbd";

    [Parameter]
    public string Href { get; set; }
    [Parameter]
    public string BorderColor { get; set; } = "#866fbd";
    [Parameter]
    public string BorderWidth { get; set; } = "1px";
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public string FontColour { get; set; } = "white";

    [Parameter]
    public EventCallback OnClickEvent { get; set; }

    [Parameter]
    public string Width { get; set; } = "100px";

    [Parameter]
    public string Padding { get; set; } = "0";

    [Parameter]
    public string Margin { get; set; } = "0";

    [Parameter]
    public ButtonColour Colour { get; set; } = ButtonColour.Purple;

    private async Task ButtonClick()
    {
        await OnClickEvent.InvokeAsync(null);
    }

    private string GetClass()
    {
        return BtnClass + GetColour();
    }

    private string GetColour()
    {
        switch (Colour)
        {
            case ButtonColour.Purple:
                return "maincolor";
                break;
            case ButtonColour.Blue:
                return "maincolor2";
                break;
            case ButtonColour.Green:
                return "maincolor3";
                break;
        }
        return "maincolor";
    }

    public enum ButtonColour
    {
        Blue,
        Purple,
        Green
    }
}
